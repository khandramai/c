name: 'Compare RAML Schemas'
description: 'Compares schema changes between two Git references (tags/commits)'

inputs:
  current-ref:
    description: 'Текущая версия (HEAD, тег или SHA)'
    required: true
  previous-ref:
    description: 'Предыдущая версия (тег или SHA первого коммита)'
    required: true
  schemas-path:
    description: 'Путь к папке со схемами (ramls)'
    required: true
    default: 'ramls'

outputs:
  report:
    description: 'Сгенерированный отчет об изменениях'

runs:
  using: 'composite'
  steps:
    - name: Get Schema Changes
      id: schema_diff
      shell: bash
      run: |
        REPORT_FILE="schema_report.md"
        CURRENT_REF="${{ inputs.current-ref }}"
        PREVIOUS_REF="${{ inputs.previous-ref }}"
        SCHEMAS_PATH="${{ inputs.schemas-path }}"
        
        # Проверяем, существует ли обе ревизии. 
        # Если PREVIOUS_REF == CURRENT_REF, git diff покажет 0 изменений.
        if git rev-parse --verify --quiet "$PREVIOUS_REF" && git rev-parse --verify --quiet "$CURRENT_REF"; then
        
            # Используем git diff для сравнения папки между двумя ревизиями
            DIFF_OUTPUT=$(git diff --name-status "$PREVIOUS_REF" "$CURRENT_REF" -- "$SCHEMAS_PATH")
        
            if [ -z "$DIFF_OUTPUT" ]; then
                echo "### Изменения в схемах (папка: $SCHEMAS_PATH)" > $REPORT_FILE
                echo "✅ Изменения в схемах не обнаружены." >> $REPORT_FILE
            else
                echo "### Изменения в схемах (папка: $SCHEMAS_PATH)" > $REPORT_FILE
                echo "#### Сравнение: $PREVIOUS_REF...$CURRENT_REF" >> $REPORT_FILE
                echo "#### Изменения обнаружены:" >> $REPORT_FILE
        
                # Добавленные файлы
                ADDED=$(echo "$DIFF_OUTPUT" | grep '^A' | awk '{print $2}')
                if [ ! -z "$ADDED" ]; then
                    echo "#### ➕ Добавлено (A):" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                    echo "$ADDED" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                fi
        
                # Измененные файлы
                MODIFIED=$(echo "$DIFF_OUTPUT" | grep '^M' | awk '{print $2}')
                if [ ! -z "$MODIFIED" ]; then
                    echo "#### ✏️ Изменено (M):" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                    echo "$MODIFIED" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                fi
        
                # Удаленные файлы
                DELETED=$(echo "$DIFF_OUTPUT" | grep '^D' | awk '{print $2}')
                if [ ! -z "$DELETED" ]; then
                    echo "#### ❌ Удалено (D):" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                    echo "$DELETED" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                fi
            fi
        
        else
            echo "### Критическая ошибка: Невозможно найти одну из ревизий: '$PREVIOUS_REF' или '$CURRENT_REF'." > $REPORT_FILE
            echo "Проверьте теги или вводы." >> $REPORT_FILE
        fi
        
        # Передаем отчет как выходные данные (экранирование)
        REPORT_CONTENT=$(cat $REPORT_FILE)
        REPORT_CONTENT="${REPORT_CONTENT//'%'/'%25'}"
        REPORT_CONTENT="${REPORT_CONTENT//$'\n'/'%0A'}"
        REPORT_CONTENT="${REPORT_CONTENT//$'\r'/'%0D'}"
        echo "report=$REPORT_CONTENT" >> $GITHUB_OUTPUT