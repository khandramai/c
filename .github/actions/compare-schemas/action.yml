name: 'Compare RAML Schemas'
description: 'Compares schema changes between two Git references (tags/commits)'

inputs:
  current-ref:
    description: 'Текущая версия (HEAD, тег или SHA)'
    required: true
  previous-ref:
    description: 'Предыдущая версия (тег или SHA)'
    required: true
  schemas-path:
    description: 'Путь к папке со схемами (относительно корня репо)'
    required: true
    default: 'ramls'

outputs:
  report:
    description: 'Сгенерированный отчет об изменениях'

runs:
  using: 'composite'
  steps:
    - name: Get Schema Changes
      id: schema_diff
      shell: bash
      run: |
        REPORT_FILE="schema_report.md"
        
        # Заголовок отчета
        echo "### Изменения в схемах (папка: ${{ inputs.schemas-path }})" > $REPORT_FILE
        echo "" >> $REPORT_FILE
        
        # Проверяем, существует ли предыдущая ссылка
        if [ "${{ inputs.previous-ref }}" == "initial" ] || [ "${{ inputs.previous-ref }}" == "initial_commit" ]; then
            echo "#### ⚠️ ВНИМАНИЕ: Предыдущий тег не найден (или это первый коммит)." >> $REPORT_FILE
            echo "Показываем все добавленные файлы." >> $REPORT_FILE
        
            # Показываем все файлы как добавленные
            ADDED_FILES=$(find ${{ inputs.schemas-path }} -type f)
            if [ -z "$ADDED_FILES" ]; then
                echo "Нет файлов в папке '${{ inputs.schemas-path }}'." >> $REPORT_FILE
            else
                echo "#### Добавлено: (Все файлы)" >> $REPORT_FILE
                echo '```' >> $REPORT_FILE
                echo "$ADDED_FILES" >> $REPORT_FILE
                echo '```' >> $REPORT_FILE
            fi
        
        else
            # Используем git diff для сравнения папки между двумя тегами
            DIFF_OUTPUT=$(git diff --name-status ${{ inputs.previous-ref }} ${{ inputs.current-ref }} -- ${{ inputs.schemas-path }})
        
            if [ -z "$DIFF_OUTPUT" ]; then
                echo "✅ Изменения в схемах не обнаружены." >> $REPORT_FILE
            else
                echo "#### Изменения обнаружены:" >> $REPORT_FILE
        
                # Добавленные файлы
                ADDED=$(echo "$DIFF_OUTPUT" | grep '^A' | awk '{print $2}')
                if [ ! -z "$ADDED" ]; then
                    echo "#### ➕ Добавлено (A):" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                    echo "$ADDED" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                fi
        
                # Измененные файлы
                MODIFIED=$(echo "$DIFF_OUTPUT" | grep '^M' | awk '{print $2}')
                if [ ! -z "$MODIFIED" ]; then
                    echo "#### ✏️ Изменено (M):" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                    echo "$MODIFIED" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                fi
        
                # Удаленные файлы
                DELETED=$(echo "$DIFF_OUTPUT" | grep '^D' | awk '{print $2}')
                if [ ! -z "$DELETED" ]; then
                    echo "#### ❌ Удалено (D):" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                    echo "$DELETED" >> $REPORT_FILE
                    echo '```' >> $REPORT_FILE
                fi
            fi
        fi
        
        # Передаем отчет как выходные данные (заменяя символы для корректного multiline output)
        REPORT_CONTENT=$(cat $REPORT_FILE)
        # Экранирование для корректной передачи в output
        REPORT_CONTENT="${REPORT_CONTENT//'%'/'%25'}"
        REPORT_CONTENT="${REPORT_CONTENT//$'\n'/'%0A'}"
        REPORT_CONTENT="${REPORT_CONTENT//$'\r'/'%0D'}"
        echo "report=$REPORT_CONTENT" >> $GITHUB_OUTPUT