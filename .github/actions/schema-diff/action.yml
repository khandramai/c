name: "Schema Diff (prev vs curr tag)"
description: "Detects prev/curr tags in a public repo, diffs configured directories, outputs markdown report."
inputs:
  repo:
    description: "owner/repo для анализа (например, khandramai/a)"
    required: true
  paths_json:
    description: "JSON-массив путей (от корня репо) для сравнения"
    required: true
  tag_selector:
    description: "auto | latest | pattern:<regex>"
    required: false
    default: "auto"
outputs:
  prev_tag:
    description: "Определённый предыдущий тег"
    value: ${{ steps.tags.outputs.prev }}
  curr_tag:
    description: "Определённый текущий тег"
    value: ${{ steps.tags.outputs.curr }}
  report_dir:
    description: "Каталог с отчётом (относительно GITHUB_WORKSPACE)"
    value: ${{ steps.diff.outputs.report_dir }}
runs:
  using: "composite"
  steps:
    - name: Install tools
      shell: bash
      run: |
        sudo apt-get update -y
        sudo apt-get install -y jq git rsync

    - name: Resolve tags
      id: tags
      shell: bash
      env:
        REPO: ${{ inputs.repo }}
        TAG_SELECTOR: ${{ inputs.tag_selector }}
      run: |
        set -euo pipefail
        git ls-remote --tags "https://github.com/${REPO}.git" \
          | awk '{print $2}' \
          | sed -E 's#refs/tags/##; s/\^\{\}$//' \
          | sort -u > all-tags.txt

        if [[ ! -s all-tags.txt ]]; then
          echo "No tags in $REPO" >&2; exit 1
        fi

        pick_latest_two_semver() {
          grep -E '^[0-9]+(\.[0-9]+)*(-[0-9A-Za-z\.-]+)?$' all-tags.txt | sort -V | tail -n 2
        }
        pick_latest_two_by_refname() { sort -V all-tags.txt | tail -n 2; }

        case "$TAG_SELECTOR" in
          auto)
            mapfile -t sel < <(pick_latest_two_semver || true)
            [[ ${#sel[@]} -lt 2 ]] && mapfile -t sel < <(pick_latest_two_by_refname)
            ;;
          latest)
            mapfile -t sel < <(sort -V all-tags.txt | tail -n 2)
            ;;
          pattern:*)
            pat="${TAG_SELECTOR#pattern:}"
            mapfile -t sel < <(grep -E "$pat" all-tags.txt | sort -V | tail -n 2)
            ;;
          *)
            echo "Unsupported tag_selector: $TAG_SELECTOR" >&2; exit 1
            ;;
        esac

        [[ ${#sel[@]} -ge 2 ]] || { echo "Could not resolve two tags in $REPO" >&2; exit 1; }

        echo "prev=${sel[0]}" >> "$GITHUB_OUTPUT"
        echo "curr=${sel[1]}" >> "$GITHUB_OUTPUT"

    - name: Checkout current tag
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repo }}
        ref: ${{ steps.tags.outputs.curr }}
        path: repo_curr
        fetch-depth: 0

    - name: Checkout previous tag
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repo }}
        ref: ${{ steps.tags.outputs.prev }}
        path: repo_prev
        fetch-depth: 0

    - name: Diff paths
      id: diff
      shell: bash
      env:
        REPO: ${{ inputs.repo }}
        PATHS_JSON: ${{ inputs.paths_json }}
      run: |
        set -euo pipefail
        mkdir -p "report/${REPO}"
        OUT_README="report/${REPO}/README.md"

        echo "# Schema Diff Report — ${REPO}" > "$OUT_README"
        echo "" >> "$OUT_README"
        echo "- Current tag: **${{ steps.tags.outputs.curr }}**" >> "$OUT_README"
        echo "- Previous tag: **${{ steps.tags.outputs.prev }}**" >> "$OUT_README"
        echo "" >> "$OUT_README"

        echo "$PATHS_JSON" | jq -e . >/dev/null || { echo "paths_json is not valid JSON"; exit 1; }
        mapfile -t paths < <(echo "$PATHS_JSON" | jq -r '.[]')

        diff_one() {
          local subpath="$1"
          local curr_dir="repo_curr/${subpath}"
          local prev_dir="repo_prev/${subpath}"
          local out_md="report/${REPO}/$(echo "$subpath" | tr '/ ' '__').md"

          echo "## Path: \`${subpath}\`" > "$out_md"

          if [[ ! -d "$curr_dir" && ! -d "$prev_dir" ]]; then
            echo "_Path not found in either tag._" >> "$out_md"
            echo "- \`${subpath}\`: not found in both tags" >> "$OUT_README"
            return
          fi

          tmp_prev="$(mktemp -d)"; tmp_curr="$(mktemp -d)"
          [[ -d "$prev_dir" ]] && rsync -a --exclude '.git' "$prev_dir"/ "$tmp_prev"/ || true
          [[ -d "$curr_dir" ]] && rsync -a --exclude '.git' "$curr_dir"/ "$tmp_curr"/ || true

          shopt -s nullglob
          for f in $(find "$tmp_prev" -type f -name '*.json'); do jq -S . "$f" > "$f.norm" && mv "$f.norm" "$f"; done
          for f in $(find "$tmp_curr" -type f -name '*.json'); do jq -S . "$f" > "$f.norm" && mv "$f.norm" "$f"; done

          if diff -ruN "$tmp_prev" "$tmp_curr" > "$out_md.tmp" ; then
            echo "_No differences._" >> "$out_md"
            echo "- \`${subpath}\`: no changes" >> "$OUT_README"
          else
            echo '```diff' >> "$out_md"
            cat "$out_md.tmp" >> "$out_md"
            echo '```' >> "$out_md"
            echo "- \`${subpath}\`: **changes detected**" >> "$OUT_README"
          fi
          rm -rf "$tmp_prev" "$tmp_curr" "$out_md.tmp" || true
        }

        for p in "${paths[@]}"; do diff_one "$p"; done

        {
          echo ""
          echo "### Subreports"
          for md in report/${REPO}/*.md; do
            base=$(basename "$md")
            [[ "$base" == "README.md" ]] && continue
            title="${base%.md}"
            echo "- [$title](./$base)"
          done
        } >> "$OUT_README"

        echo "report_dir=report/${REPO}" >> "$GITHUB_OUTPUT"
